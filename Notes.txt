Servlet:
    - Servlet is an API which is used to build Web application
    - Servlet is a piece of code which will be present inside Server.
    - Servlet takes the Request, processes it and Produces the Response.
    - Servlet is an Interface present inside javax.servlet package.
    - We can create our own servlet by creating a Class and implementing it to Servlet Interface and overriding all the methods of Servlet.
    - Our own main logic should be return inside service() method, because service() method is the one which takes Request and Produces Response.

Methods of Servlet: 
    1. public void init();
    2. public void Servic(req,res);
    3. public void destroy();
    4. public ServletConfig getServletConfig();

Generic Servlet:
    - Generic Servlet is an abstract class present inside javax.Servlet package.
    - It is a sub-Class of Servlet Interface.
    - If we want to create our own servlet(Generic Servlet) we need to create a Class and extend that Class to Generic Servlet and override the Service() Method.
        because in Generic servlet all the methods Servlet Interface is overriden except Service() method.
    Servlet
        ^
        |
        |
    GenericServlet
        ^
        |
    MyServlet

Methods of GenericServlet:
    1. ServletContext getServletContext()
    2. public void Service(req,res); abstract method.
    3. String getInitParameters()
    4. String getInitParametersName()

Creating GenericServlet:

Providing URL for Created Servlet:
    - We can provide URL to the servlet using two ways:
        1. using Servlet tag and servlet-mapping tag in web.xml
        2. using @WebServlet("/URL") annotation in Java servlet Class.
note: among two ways we have to follow anyone either using servlet tag or using @WebServlet() annotation, Dont use both.
    - To Print content on the browser we use PrintWriter Object.

HTTPServlet :
    - HTTPServlet is an abstract sub-class of GenericServlet present inside javax.servlet.http package.
    - Inside HTTPServlet all the methods of Servlet Interface has been overriden including Service() method.
    - Then also they made it abstract to avoid direct Object creation.
    - To create our own HTTPServlet, create a Class and extend that Class to HTTPServlet and override any one of the methods of HTTPServlet.
    - HTTPServlet is used to handle HTTP Request and HTTP Response.
    Servlet
        ^
        |
        |
    GenericServlet
        ^
        |
    HTTPServlet
        ^
        |
    MyServlet

Methods of HTTPServlet :
    1. public void Service(ServletRequest req, ServletRequest res)
    2. protected void Service(HttpServletRequest req, HttpServletResponse res)
    3. protected void doPost(HttpServletRequest req, HttpServletResponse res)
    4. protected void doGet(HttpServletRequest req, HttpServletResponse res)
    5. protected void doPut(HttpServletRequest req, HttpServletResponse res)
    6. protected void doDelete(HttpServletRequest req, HttpServletResponse res)
    7. protected void doHead(HttpServletRequest req, HttpServletResponse res)


Reading HTML form data inside HTTPServlet:
    - To read HTML form data inside HttpServlet we need to provide URL of servlet inside form action="URL" and call req.getParameter(input field name) method by passing input field name.

Reading the HTML form data inside doPost() method of HttpServlet:
    - import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/new")
public class NewServlet extends HttpServlet{
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("Http Servlet is trigger");
		
		PrintWriter pw = resp.getWriter();
		pw.print("<html><body>");
		pw.print("<h1>This is HTTPServlet</h1>");
		pw.print("<html><body>");
		
	}
}

index.jsp
<html>
<body>
<h2><%= "Read form data" %></h2>
	<form action="read" method="post">
	Name : <input type="text" name="username" > <br>
	Password : <input type="password" name="password"> <br>
	<input type="submit" name="submit">
	</form>
</body>
</html>

    - To read HTML form data inside doGet() method of HttpServlet it not mandatory to mention method in HTML form.
    - To read html form data inside dePost() method of HttpServlet it is mandatory to mention method="post" in HTML form.


welcome-file-list :
    Welcome file:
        - The file which will be getting displayed when the application is started is known as welcome file.
        - Bydefault index.html,index.htm,index.jsp will be considered as welcome-files.
        - If we want to configure our own file as a welcome-file, we need to make use of <welcome-file-list> tag inside web.xml.
        - Inside <welcome-file-list> we can configure multiple file as welcome file among them the one which is present from the top will considered as welcome file.
        eg. :
<web-app>
  <display-name>Archetype Created Web Application</display-name>
  
  <welcome-file-list>
  <welcome-file>register.html</welcome-file>
  <welcome-file>test.html</welcome-file>
  </welcome-file-list>
</web-app>

How does Servlet works or working procedure of Servlet?
    Diagram.

    Request side parameters:
    1. URL
    2. Method type
    3. data

    Response side parameters:
    1. Status code
    2. content type
    3. Actual content

Servlet life cycle:
    - From the Beginning till the end of the Servlet all the process the servlet is going to go through is known as servlet life cycle.
    - Servlet life cycle is taken care by Web Container or Servlet Container.
    - Servlet life cycle contains following steps:
        1. Loading the servlet into the memory:
            - Web Container uses Class loader to load the Servlet into the memory.
        2. Instantiating the Servlet :
            - The Object of Servlet will be Created by the Web Container in order to invoke service methods.
        3. Initializing the Servlet :
            - The Servlet will be initailized once after the Object is Created.
            - During Initializing the init() method of the Servlet will be invoke.
        4. Invoking the Service :
            - Service method will be invoke and takes the Request and processes it then Produces the Response.
        5. Destroy the Servlet :
            - When servlet is getting unloaded from the memory, it calls destroy() method of Servlet.

RequestDisptcher :
    - RequestDisptcher is used to Dispatch the Request from one page to another page.
    - That page either it may be Servlet -> Servlet , Servlet -> jsp , Servlet -> html , jsp -> jsp , jsp -> Servlet , jsp -> html.
    - RequestDisptcher is an Interface present javax.servlet package.
    - We can get an Object of RequestDisptcher using getRequestDispatcher(String URL) method present inside req Object.
    - RequestDisptcher contains following methods:
        1. forward(req,resp);
        2. include(req,resp);
note: If you want to Dispatch the Request to another servlet pass URL of another servlet in getRequestDispatcher(Servlet_URL) method.
    If you want to Dispatch the Request to HTML page name inside getRequestDispatcher(html) method.
    If you want to Dispatch the Request to jsp page name inside getRequestDispatcher(jsp) method.

forward(req,resp);
    - It is used to forward the Request from one page to another.
include(req,resp);
    - It is used to include one method inside another.

Req.setAttribute(String key , Object value);
    - It is used to set the data to the Request Object.
    - It takes String key and Object value.
    - We can set any type of data into the Request Object using this method. i.e. we can set integer, String, Double, java Objects also.

Req.getAttribute(String key);
    - It is used to get the data from Request Object by passing String key.
    - It returns any type of data in Object tag.
    - If you want to convert it into respective data type use typeCast operator. i.e DownCasting.

resp.sendRedirect(String path);
    - Whenever we want to redirect our Request to some third party websites or to some servlet pages or to some html page, we make use of sendRedirect() method present inside HttpServletResponse Object.
    
    